networks:
  avb-network:
    driver: bridge

services:
  pg-users:
      image: postgres:latest
      restart: unless-stopped
      environment:
        POSTGRES_DB: "${USERS_DB_NAME}"
        POSTGRES_USER: "${USERS_DB_USER}"
        POSTGRES_PASSWORD: "${USERS_DB_PASS}"
        PGPORT: ${USERS_DB_PORT}
      expose:
        - ${USERS_DB_PORT}
      ports:
        - "${USERS_DB_PORT}:${USERS_DB_PORT}"
      volumes:
        - ./_data/pg/users-data:/var/lib/postgresql/data
      healthcheck:
        test: [ "CMD-SHELL", "pg_isready -U ${USERS_DB_USER} -d ${USERS_DB_NAME} -p ${USERS_DB_PORT}" ]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 10s
      networks:
        - avb-network

  pg-companies:
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_DB: "${COMPANIES_DB_NAME}"
      POSTGRES_USER: "${COMPANIES_DB_USER}"
      POSTGRES_PASSWORD: "${COMPANIES_DB_PASS}"
      PGPORT: ${COMPANIES_DB_PORT}
    expose:
      - ${COMPANIES_DB_PORT}
    ports:
      - "${COMPANIES_DB_PORT}:${COMPANIES_DB_PORT}"
    volumes:
      - ./_data/pg/companies-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${COMPANIES_DB_USER} -d ${COMPANIES_DB_NAME} -p ${COMPANIES_DB_PORT}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - avb-network

  api-gw:
    build:
      context: ./api-gw
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    expose:
      - "8080"
    environment:
      - GATEWAY_SERVICE_APP_PORT=${GATEWAY_SERVICE_APP_PORT}
      - USER_SERVICE_URL=${USER_SERVICE_URL}
      - COMPANY_SERVICE_URL=${COMPANY_SERVICE_URL}
    networks:
      - avb-network
    depends_on:
      - service-discovery
    restart: unless-stopped

  service-discovery:
    build:
      context: ./service-discovery
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    expose:
      - "8761"
    volumes:
      - ./_data/discovery-service-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - avb-network
    restart: unless-stopped

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "8081:${USER_SERVICE_APP_PORT}"
    expose:
      - "${USER_SERVICE_APP_PORT}"
    environment:
      - USERS_DB_HOST=${USERS_DB_HOST}
      - USERS_DB_NAME=${USERS_DB_NAME}
      - USERS_DB_USER=${USERS_DB_USER}
      - USERS_DB_PASS=${USERS_DB_PASS}
      - USERS_DB_PORT=${USERS_DB_PORT}
      - USER_SERVICE_APP_PORT=${USER_SERVICE_APP_PORT}
    depends_on:
      - pg-users
      - service-discovery
    networks:
      - avb-network
    restart: unless-stopped

  company-service:
    build:
      context: ./company-service
      dockerfile: Dockerfile
    ports:
      - "8082:${COMPANY_SERVICE_APP_PORT}"
    expose:
      - "${COMPANY_SERVICE_APP_PORT}"
    environment:
      - COMPANIES_DB_HOST=${COMPANIES_DB_HOST}
      - COMPANIES_DB_NAME=${COMPANIES_DB_NAME}
      - COMPANIES_DB_USER=${COMPANIES_DB_USER}
      - COMPANIES_DB_PASS=${COMPANIES_DB_PASS}
      - COMPANIES_DB_PORT=${COMPANIES_DB_PORT}
      - COMPANY_SERVICE_APP_PORT=${COMPANY_SERVICE_APP_PORT}
    depends_on:
      - pg-companies
      - service-discovery
    networks:
      - avb-network
    restart: unless-stopped